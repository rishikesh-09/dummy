//index.js---------------------------------------------------------------------------------
import { createRouter, createWebHistory } from 'vue-router';
import ProductList from '@/views/ProductList.vue';
import ProductDetails from '@/views/ProductDetails.vue';
import Cart from '@/views/Cart.vue';
import Home from '@/views/Home.vue';
import Wishlist from '@/views/Wishlist.vue';
import Login from '@/views/Login.vue';
import Signup from '@/views/Signup.vue';
import { useAuthStore } from '@/store/authStore';

const routes = [
  
  {path: '/', component: Home,  meta: { requiresAuth: true }},
  {path: '/home', component: Home,  meta: { requiresAuth: true }},
  { path: '/shop', name:'Shop', component: ProductList,  meta: { requiresAuth: true } },
  { path: '/product/:id', component: ProductDetails,  meta: { requiresAuth: true } },
  { path: '/cart', component: Cart,  meta: { requiresAuth: true } },
  { path: '/shop/:category', name: 'ShopCategory', component: ProductList,  meta: { requiresAuth: true } },
  { path: '/wishlist', name: 'Wishlist', component: Wishlist,  meta: { requiresAuth: true } },
  { path: '/login' , name: 'Login', component: Login },
  {path:'/signup', name:'Signup', component: Signup},

];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

router.beforeEach((to, from, next) => {
  const authStore = useAuthStore();
  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    next({ name: 'Login' });
  } else {
    next();
  }
});

export default router;

//users.json-------------------------------------------------------------------------------

{
    "users": [
      {
        "id": 1,
        "email": "john@example.com",
        "password": "12345678",
        "name": "John Doe"
      },
      {
        "id": 2,
        "email": "jane@example.com",
        "password": "32638465837",
        "name": "Jane Smith"
      },
      {
        "id": 3,
        "email": "bob@example.com",
        "password": "98346536763",
        "name": "Bob Johnson"
      }
    ]
  }
--------------------------------------------------------------------------------------------------------------------------------------
import { defineStore } from 'pinia';
import userData from '@/assests/userData.json';

export const useAuthStore = defineStore('auth', {
  state: () => ({
    user: null,
  }),
  actions: {
    async login(email, password) {
      const user = userData.users.find(u => u.email === email && u.password === password);
      if (user) {
        this.user = { id: user.id, email: user.email, name: user.name };
        localStorage.setItem('user', JSON.stringify(this.user));
      } else {
        throw new Error('Invalid credentials');
      }
    },
    async signup(email, password, name) {
      if (userData.users.some(u => u.email === email)) {
        throw new Error('Email already registered');
      }
      const newUser = {
        id: userData.users.length + 1,
        email,
        password,
        name
      };
      userData.users.push(newUser);
      this.user = { id: newUser.id, email: newUser.email, name: newUser.name };
      localStorage.setItem('user', JSON.stringify(this.user));
    
      console.log('New user registered:', newUser);
    },
    logout() {
      this.user = null;
      localStorage.removeItem('user');
    },
    initAuth() {
      const user = localStorage.getItem('user');
      if (user) {
        this.user = JSON.parse(user);
      }
    },
  },
  getters: {
    isAuthenticated: (state) => !!state.user,
  },
});

//Login.vue ------------------------------------------------------------------------------------------

<template>
  <v-container fluid class="fill-height">
    <v-row align="center" justify="center">
      <v-col cols="12" sm="8" md="6" lg="4">
        <v-card class="elevation-2">
          <v-toolbar color="primary" dark flat>
            <v-toolbar-title>Login</v-toolbar-title>
          </v-toolbar>
          <v-card-text>
            <v-form @submit.prevent="login" ref="form">
              <v-text-field
                v-model="email"
                label="Email"
                name="email"
                prepend-icon="mdi-email"
                type="email"
                :rules="[rules.required, rules.email]"
              ></v-text-field>
              <v-text-field
                v-model="password"
                label="Password"
                name="password"
                prepend-icon="mdi-lock"
                type="password"
                :rules="[rules.required]"
              ></v-text-field>
            </v-form>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn text @click="$router.push('/signup')">Sign up</v-btn>
            <v-btn color="primary" @click="login">Login</v-btn>
          </v-card-actions>
        </v-card>
      </v-col>
    </v-row>
    <v-snackbar v-model="snackbar" :color="snackbarColor" timeout="3000">
      {{ snackbarText }}
    </v-snackbar>
  </v-container>
</template>

<script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/store/auth';

const router = useRouter();
const authStore = useAuthStore();

const email = ref('');
const password = ref('');
const form = ref(null);

const snackbar = ref(false);
const snackbarText = ref('');
const snackbarColor = ref('');

const rules = {
  required: value => !!value || 'Required.',
  email: v => /.+@.+\..+/.test(v) || 'E-mail must be valid',
};

const login = async () => {
  const { valid } = await form.value.validate();
  
  if (valid) {
    try {
      await authStore.login(email.value, password.value);
      router.push('/home');
    } catch (error) {
      snackbarText.value = error.message;
      snackbarColor.value = 'error';
      snackbar.value = true;
    }
  }
};
</script>

//SignUp.vue ----------------------------------------------------------------------------------

<template>
  <v-container fluid class="fill-height">
    <v-row align="center" justify="center">
      <v-col cols="12" sm="8" md="6" lg="4">
        <v-card class="elevation-2">
          <v-toolbar color="primary" dark flat>
            <v-toolbar-title>Signup</v-toolbar-title>
          </v-toolbar>
          <v-card-text>
            <v-form @submit.prevent="signup" ref="form">
              <v-text-field
                v-model="name"
                label="Name"
                name="name"
                prepend-icon="mdi-account"
                :rules="[rules.required]"
              ></v-text-field>
              <v-text-field
                v-model="email"
                label="Email"
                name="email"
                prepend-icon="mdi-email"
                type="email"
                :rules="[rules.required, rules.email]"
              ></v-text-field>
              <v-text-field
                v-model="password"
                label="Password"
                name="password"
                prepend-icon="mdi-lock"
                type="password"
                :rules="[rules.required, rules.min]"
              ></v-text-field>
              <v-text-field
                v-model="confirmPassword"
                label="Confirm Password"
                name="confirmPassword"
                prepend-icon="mdi-lock"
                type="password"
                :rules="[rules.required, rules.passwordMatch]"
              ></v-text-field>
            </v-form>
          </v-card-text>
          <v-card-actions>
            <v-spacer></v-spacer>
            <v-btn text @click="$router.push('/login')">Login</v-btn>
            <v-btn color="primary" @click="signup">Signup</v-btn>
          </v-card-actions>
        </v-card>
      </v-col>
    </v-row>
    <v-snackbar v-model="snackbar" :color="snackbarColor" timeout="3000">
      {{ snackbarText }}
    </v-snackbar>
  </v-container>
</template>

<script setup>
import { ref } from 'vue';
import { useRouter } from 'vue-router';
import { useAuthStore } from '@/store/auth';

const router = useRouter();
const authStore = useAuthStore();

const name = ref('');
const email = ref('');
const password = ref('');
const confirmPassword = ref('');
const form = ref(null);

const snackbar = ref(false);
const snackbarText = ref('');
const snackbarColor = ref('');

const rules = {
  required: value => !!value || 'Required.',
  min: v => v.length >= 8 || 'Min 8 characters',
  email: v => /.+@.+\..+/.test(v) || 'E-mail must be valid',
  passwordMatch: () => password.value === confirmPassword.value || 'Passwords must match'
};

const signup = async () => {
  const { valid } = await form.value.validate();
  
  if (valid) {
    try {
      await authStore.signup(email.value, password.value, name.value);
      snackbarText.value = 'Signup successful!';
      snackbarColor.value = 'success';
      snackbar.value = true;
      router.push('/');
    } catch (error) {
      snackbarText.value = error.message;
      snackbarColor.value = 'error';
      snackbar.value = true;
    }
  }
};
</script>
